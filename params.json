{"name":"Intellikid","tagline":"Coding Standards & Best Practices","body":"# 2016  SLIIT Software Engineering WeekEnd batch group 011 \r\n\r\nThe goal of these guidelines is to create uniform coding habits among software personnel in the\r\nIntelliKid development team so that reading, checking, and maintaining code written by different persons\r\nbecomes easier. The intent of these standards is to define a natural style and consistency, yet leave\r\nto the authors of the source code, the freedom to practice their craft without\r\nunnecessary burden. All developers in the project must adhere to these coding practices.\r\n\r\n## Variable Naming\r\n* Use all lower case letters\r\n* Use '_' as the word separator.\r\n* Global constants should be all caps with '_' separators.\r\n* Try to use meaningful names as much as possible.\r\n* All variables should be declared at the top of the class.\r\n\r\n## Function Definitions\r\n* Function names should starts with a lowercase letter.\r\n* Use camel case style.\r\n* Name should be descriptive by itself indicating the purpose of the function.\r\n* Function definitions should adhere to the \"BSD/Allman style\"\r\n\r\n<pre>\r\n    function fooFunction($arg1, $arg2 = '') {\r\n      if (condition) {\r\n        statement;\r\n      }\r\n      return $val;\r\n    }\r\n</pre>\r\nPlease note the placement of the curly braces. \r\n\r\n* Methods need to be marked with the access modifiers whenever needed\r\n* Overriding methods must use `@Override` annotation above the method with a comment.\r\n\r\n##Classes/Interfaces\r\n* Class/Interface names should always start with a capital letter.\r\n* When using inheritance sub-class should use `extends` keyword while class is implementing an interface it should use `implements` keyword\r\n* Try to have classes in different files.\r\n\r\n##Comments\r\n* C style comments (/* */) and standard C++ comments (//) are both fine. Use of Perl/shell style comments (#) is discouraged.\r\n* Place a comment in every custom class that used in the application. It should have `@author`, `@desc` and `@created` annotations with a comment block.\r\n\r\n##Arrays\r\n* Use the following format for associative arrays:\r\n<pre>\r\n$config= [\r\n'name'=>'Yii',\r\n'options'=> ['usePHP'=>true],\r\n];\r\n</pre>\r\n\r\n##Packaging/Directories\r\n* Use lower case\r\n* Use plural form for nouns which represent objects (e.g. validators)\r\n* Use singular form for names representing relevant functionality/features (e.g. web)\r\n\r\n##Blank lines\r\n* Blank lines improve readability by setting off sections of code that are logically related.\r\n* Two blank lines should always be used in the following circumstances:\r\n * Between sections of a source file\r\n * Between class and interface definitions\r\n* One blank line should always be used in the following circumstances:\r\n * Between methods\r\n * Between the local variables in a method and its first statement\r\n * Before a block (control structures) or single-line comment\r\n * Between logical sections inside a method to improve readability\r\n\r\n##Additional Rules\r\n* Control structures, methods blocks, classes and everything should be properly indented using tab spaces.\r\n* Single line if, while, for conditional blocks should use curly braces even though it is not mandatory in language.","google":"UA-000000-01","note":"Don't delete this file! It's used internally to help with page regeneration."}